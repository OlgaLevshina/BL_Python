# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только
# к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell():
    def __init__(self, cellule):
        self.cellule = cellule

    def __add__(self, other):
        # Сложение. Объединение двух клеток.
        # При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
        return Cell(self.cellule + other.cellule)

    def __sub__(self, other):
        # Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
        # количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
        if self.cellule - other.cellule > 0:
            return Cell(self.cellule - other.cellule)
        else:
            print("Разность количества ячеек двух клеток меньше нуля")
    def __mul__(self, other):
        # Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как
        # произведение количества ячеек этих двух клеток.
        return Cell(self.cellule * other.cellule)

    def __truediv__(self, other):
        # Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
        # ячеек этих двух клеток. В методе деления должно осуществляться округление значения до целого числа.
        return Cell(round(self.cellule / other.cellule))

    def make_order(self, row):
        # Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
        # аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
        stroka_cell = "\n".join(["*" * row for _ in range (self.cellule // row)])
        stroka_cell = f'{stroka_cell}\n{"*" * (self.cellule % row)}'
        return stroka_cell

    def __str__(self):
        return str(self.cellule)

cell_1 = Cell(22)
cell_2 = Cell(10)
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 / cell_2)
print(cell_1.make_order(5))
